// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
WITH created_post AS (
    INSERT INTO posts (id, created_at, updated_at, title, url, feed_id, description, published_at)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6, 
        $7, 
        $8
    )
    RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
) 
SELECT created_post.id, created_post.created_at, created_post.updated_at, created_post.title, created_post.url, created_post.description, created_post.published_at, created_post.feed_id, 
feed.name AS feed_name
FROM created_post 
LEFT JOIN feeds feed 
    ON created_post.feed_id = feed.id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	FeedID      uuid.UUID
	Description sql.NullString
	PublishedAt sql.NullTime
}

type CreatePostRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.UUID
	FeedName    sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.FeedID,
		arg.Description,
		arg.PublishedAt,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.FeedName,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT p.id, p.created_at, p.updated_at, title, p.url, description, published_at, feed_id, f.id, f.created_at, f.updated_at, f.name, f.url, user_id, last_fetched_at, u.id, u.created_at, u.updated_at, u.name FROM posts p 
LEFT JOIN feeds f
ON p.feed_id = f.id
LEFT JOIN users u
ON f.user_id = u.id
WHERE u.id = $1
ORDER BY p.published_at DESC
LIMIT $2
`

type GetUserPostsParams struct {
	ID    uuid.UUID
	Limit int32
}

type GetUserPostsRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Title         string
	Url           string
	Description   sql.NullString
	PublishedAt   sql.NullTime
	FeedID        uuid.UUID
	ID_2          uuid.NullUUID
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	Name          sql.NullString
	Url_2         sql.NullString
	UserID        uuid.NullUUID
	LastFetchedAt sql.NullTime
	ID_3          uuid.NullUUID
	CreatedAt_3   sql.NullTime
	UpdatedAt_3   sql.NullTime
	Name_2        sql.NullString
}

func (q *Queries) GetUserPosts(ctx context.Context, arg GetUserPostsParams) ([]GetUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsRow
	for rows.Next() {
		var i GetUserPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
